name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-windows.txt

    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed --name "Realisierungsdatenvisualizer" --add-data "realisierungsdaten.html;." --hidden-import=tkinterdnd2 --hidden-import=pandas --hidden-import=numpy --icon=logo.png csv_formatter_gui.py

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-executable
        path: dist/Realisierungsdatenvisualizer.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-macos.txt

    - name: Build macOS app
      run: |
        pyinstaller --onefile --windowed --name "Realisierungsdatenvisualizer" --add-data "realisierungsdaten.html:." --hidden-import=tkinterdnd2 --hidden-import=pandas --hidden-import=numpy csv_formatter_gui.py

    - name: Create DMG (if available)
      run: |
        if [ -f "dmg_settings.py" ]; then
          python dmg_settings.py
        fi
      continue-on-error: true

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: macos-executable
        path: dist/Realisierungsdatenvisualizer

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-linux.txt

    - name: Build Linux executable
      run: |
        pyinstaller --onefile --windowed --name "Realisierungsdatenvisualizer" --add-data "realisierungsdaten.html:." --hidden-import=tkinterdnd2 --hidden-import=pandas --hidden-import=numpy csv_formatter_gui.py

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v3
      with:
        name: linux-executable
        path: dist/Realisierungsdatenvisualizer

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release assets
      run: |
        mkdir release-assets
        cp windows-executable/Realisierungsdatenvisualizer.exe release-assets/Realisierungsdatenvisualizer-Windows.exe
        cp macos-executable/Realisierungsdatenvisualizer release-assets/Realisierungsdatenvisualizer-macOS
        cp linux-executable/Realisierungsdatenvisualizer release-assets/Realisierungsdatenvisualizer-Linux

        # Make executables executable
        chmod +x release-assets/Realisierungsdatenvisualizer-macOS
        chmod +x release-assets/Realisierungsdatenvisualizer-Linux

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}