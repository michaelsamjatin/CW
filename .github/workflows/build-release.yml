name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-windows.txt

    - name: Test build requirements
      run: |
        $env:PYTHONIOENCODING = "utf-8"
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        python test_build.py
      shell: pwsh

    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed --name "Realisierungsdatenvisualizer" --add-data "realisierungsdaten.html;." --hidden-import=tkinterdnd2 --hidden-import=pandas --hidden-import=numpy csv_formatter_gui.py
        # Verify the executable was created
        if (Test-Path "dist/Realisierungsdatenvisualizer.exe") {
          Write-Host "Executable created successfully"
          Get-Item "dist/Realisierungsdatenvisualizer.exe" | Select-Object Name, Length
        } else {
          Write-Error "Executable was not created"
          exit 1
        }
      shell: pwsh

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: dist/Realisierungsdatenvisualizer.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-macos.txt

    - name: Test build requirements
      run: |
        python test_build.py

    - name: Build macOS app
      run: |
        pyinstaller --onefile --windowed --name "Realisierungsdatenvisualizer" --add-data "realisierungsdaten.html:." --hidden-import=tkinterdnd2 --hidden-import=pandas --hidden-import=numpy csv_formatter_gui.py
        # Verify the executable was created
        if [ -f "dist/Realisierungsdatenvisualizer" ]; then
          echo "Executable created successfully"
          ls -la dist/Realisierungsdatenvisualizer
        else
          echo "Error: Executable was not created"
          exit 1
        fi

    - name: Create DMG (if available)
      run: |
        if [ -f "dmg_settings.py" ]; then
          python dmg_settings.py
        fi
      continue-on-error: true

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-executable
        path: dist/Realisierungsdatenvisualizer

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install requirements with fallback for problematic packages
        pip install pandas>=1.5.0,\<2.1.0 numpy>=1.21.0,\<1.25.0 pyinstaller>=5.7.0
        pip install tkinterdnd2>=0.4.0 || echo "tkinterdnd2 install failed, continuing..."

    - name: Test build requirements
      run: |
        python test_build.py

    - name: Build Linux executable
      run: |
        # Set display for headless build
        export DISPLAY=:99
        # Start a virtual display for GUI testing
        sudo apt-get install -y xvfb
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

        pyinstaller --onefile --windowed --name "Realisierungsdatenvisualizer" --add-data "realisierungsdaten.html:." --hidden-import=tkinterdnd2 --hidden-import=pandas --hidden-import=numpy csv_formatter_gui.py
        # Verify the executable was created
        if [ -f "dist/Realisierungsdatenvisualizer" ]; then
          echo "Executable created successfully"
          ls -la dist/Realisierungsdatenvisualizer
        else
          echo "Error: Executable was not created"
          exit 1
        fi

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-executable
        path: dist/Realisierungsdatenvisualizer

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Debug GitHub context
      run: |
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub event name: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"

    - name: Create release assets
      run: |
        echo "Creating release directory..."
        mkdir release-assets

        echo "Checking downloaded artifacts..."
        ls -la

        # In artifact v4, files are extracted directly to named directories
        echo "Copying Windows executable..."
        cp windows-executable/Realisierungsdatenvisualizer.exe release-assets/Realisierungsdatenvisualizer-Windows.exe

        echo "Copying macOS executable..."
        cp macos-executable/Realisierungsdatenvisualizer release-assets/Realisierungsdatenvisualizer-macOS

        echo "Copying Linux executable..."
        cp linux-executable/Realisierungsdatenvisualizer release-assets/Realisierungsdatenvisualizer-Linux

        # Make executables executable
        chmod +x release-assets/Realisierungsdatenvisualizer-macOS
        chmod +x release-assets/Realisierungsdatenvisualizer-Linux

        # List files for debugging
        echo "Release assets created:"
        ls -la release-assets/

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: release-assets/*
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}