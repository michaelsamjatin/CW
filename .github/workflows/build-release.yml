name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-windows.txt

    - name: Test build requirements
      run: |
        $env:PYTHONIOENCODING = "utf-8"
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        python test_build.py
      shell: pwsh

    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed --name "Realisierungsdatenvisualizer" --hidden-import=tkinterdnd2 --hidden-import=pandas --hidden-import=numpy --hidden-import=reportlab csv_formatter_gui.py
        # Verify the executable was created
        if (Test-Path "dist/Realisierungsdatenvisualizer.exe") {
          Write-Host "Executable created successfully"
          Get-Item "dist/Realisierungsdatenvisualizer.exe" | Select-Object Name, Length
        } else {
          Write-Error "Executable was not created"
          exit 1
        }
      shell: pwsh

    - name: Install Inno Setup
      run: |
        choco install innosetup -y
      shell: pwsh

    - name: Create Windows installer
      run: |
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
        # Verify installer was created
        if (Test-Path "dist/Realisierungsdatenvisualizer-Setup.exe") {
          Write-Host "Installer created successfully"
          Get-Item "dist/Realisierungsdatenvisualizer-Setup.exe" | Select-Object Name, Length
        } else {
          Write-Error "Installer was not created"
          exit 1
        }
      shell: pwsh

    - name: Upload Windows installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: dist/Realisierungsdatenvisualizer-Setup.exe

  build-macos-intel:
    runs-on: macos-13
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-macos.txt

    - name: Test build requirements
      run: |
        python test_build.py

    - name: Build macOS Intel app bundle
      run: |
        pyinstaller --windowed --name "Realisierungsdatenvisualizer" --hidden-import=tkinterdnd2 --hidden-import=pandas --hidden-import=numpy --hidden-import=reportlab csv_formatter_gui.py
        # Verify the app bundle was created
        if [ -d "dist/Realisierungsdatenvisualizer.app" ]; then
          echo "Intel app bundle created successfully"
          ls -la dist/Realisierungsdatenvisualizer.app
        else
          echo "Error: Intel app bundle was not created"
          exit 1
        fi

    - name: Install create-dmg
      run: |
        brew install create-dmg

    - name: Create Intel DMG installer
      run: |
        create-dmg \
          --volname "Realisierungsdatenvisualizer Intel" \
          --volicon "logo.png" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "Realisierungsdatenvisualizer.app" 175 120 \
          --hide-extension "Realisierungsdatenvisualizer.app" \
          --app-drop-link 425 120 \
          "dist/Realisierungsdatenvisualizer-Intel.dmg" \
          "dist/Realisierungsdatenvisualizer.app" || true

        # If create-dmg fails, create a simple DMG
        if [ ! -f "dist/Realisierungsdatenvisualizer-Intel.dmg" ]; then
          echo "create-dmg failed, creating simple Intel DMG..."
          hdiutil create -volname "Realisierungsdatenvisualizer Intel" -srcfolder "dist/Realisierungsdatenvisualizer.app" -ov -format UDZO "dist/Realisierungsdatenvisualizer-Intel.dmg"
        fi

    - name: Upload macOS Intel DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-intel-dmg
        path: dist/Realisierungsdatenvisualizer-Intel.dmg

  build-macos-apple-silicon:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-macos.txt

    - name: Test build requirements
      run: |
        python test_build.py

    - name: Build macOS Apple Silicon app bundle
      run: |
        pyinstaller --windowed --name "Realisierungsdatenvisualizer" --hidden-import=tkinterdnd2 --hidden-import=pandas --hidden-import=numpy --hidden-import=reportlab csv_formatter_gui.py
        # Verify the app bundle was created
        if [ -d "dist/Realisierungsdatenvisualizer.app" ]; then
          echo "Apple Silicon app bundle created successfully"
          ls -la dist/Realisierungsdatenvisualizer.app
        else
          echo "Error: Apple Silicon app bundle was not created"
          exit 1
        fi

    - name: Install create-dmg
      run: |
        brew install create-dmg

    - name: Create Apple Silicon DMG installer
      run: |
        create-dmg \
          --volname "Realisierungsdatenvisualizer Apple Silicon" \
          --volicon "logo.png" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "Realisierungsdatenvisualizer.app" 175 120 \
          --hide-extension "Realisierungsdatenvisualizer.app" \
          --app-drop-link 425 120 \
          "dist/Realisierungsdatenvisualizer-AppleSilicon.dmg" \
          "dist/Realisierungsdatenvisualizer.app" || true

        # If create-dmg fails, create a simple DMG
        if [ ! -f "dist/Realisierungsdatenvisualizer-AppleSilicon.dmg" ]; then
          echo "create-dmg failed, creating simple Apple Silicon DMG..."
          hdiutil create -volname "Realisierungsdatenvisualizer Apple Silicon" -srcfolder "dist/Realisierungsdatenvisualizer.app" -ov -format UDZO "dist/Realisierungsdatenvisualizer-AppleSilicon.dmg"
        fi

    - name: Upload macOS Apple Silicon DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-apple-silicon-dmg
        path: dist/Realisierungsdatenvisualizer-AppleSilicon.dmg


  release:
    needs: [build-windows, build-macos-intel, build-macos-apple-silicon]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Debug GitHub context
      run: |
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub event name: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"

    - name: Create release assets
      run: |
        echo "Creating release directory..."
        mkdir release-assets

        echo "Checking downloaded artifacts..."
        ls -la

        # In artifact v4, files are extracted directly to named directories
        echo "Copying Windows installer..."
        cp windows-installer/Realisierungsdatenvisualizer-Setup.exe release-assets/Realisierungsdatenvisualizer-Setup.exe

        echo "Copying macOS Intel DMG..."
        cp macos-intel-dmg/Realisierungsdatenvisualizer-Intel.dmg release-assets/Realisierungsdatenvisualizer-Intel.dmg

        echo "Copying macOS Apple Silicon DMG..."
        cp macos-apple-silicon-dmg/Realisierungsdatenvisualizer-AppleSilicon.dmg release-assets/Realisierungsdatenvisualizer-AppleSilicon.dmg

        # List files for debugging
        echo "Release assets created:"
        ls -la release-assets/

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: release-assets/*
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}